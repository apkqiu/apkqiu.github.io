import{_ as a,c as i,o as n,a5 as p}from"./chunks/framework.B9eG-oMa.js";const c=JSON.parse('{"title":"C语言各个类型介绍","description":"","frontmatter":{},"headers":[],"relativePath":"coding/c_cpp_types.md","filePath":"coding/c_cpp_types.md","lastUpdated":1756132200000}'),t={name:"coding/c_cpp_types.md"};function e(l,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[p(`<h1 id="c语言各个类型介绍" tabindex="-1">C语言各个类型介绍 <a class="header-anchor" href="#c语言各个类型介绍" aria-label="Permalink to &quot;C语言各个类型介绍&quot;">​</a></h1><p>在C语言中，有各种类型，如果使用不当，可能会造成奇怪的bug</p><h2 id="_1-int" tabindex="-1">1. int <a class="header-anchor" href="#_1-int" aria-label="Permalink to &quot;1. int&quot;">​</a></h2><p>这个类型应该很多程序员都熟悉吧</p><p>这个就是常见的整数类型</p><p>这个类型需要占用内存4字节</p><p>可以存储2147483647到-2147483646之间的任意整数</p><p>记住：2147483647+1=-2147483646</p><h2 id="_2-unsigned-int" tabindex="-1">2. unsigned int <a class="header-anchor" href="#_2-unsigned-int" aria-label="Permalink to &quot;2. unsigned int&quot;">​</a></h2><p>这个类型就没有负数了，如果强制转换为int的话……</p><p>这个也占用4字节</p><p>最大可以是4294967295</p><p>已经很大了</p><h2 id="_3-float" tabindex="-1">3. float <a class="header-anchor" href="#_3-float" aria-label="Permalink to &quot;3. float&quot;">​</a></h2><p>这个类型可以表示一个6位小数</p><p>占用4字节</p><p>可以表示10e-37～10e37之间的任意小数</p><p>很不精确</p><p>容易出现bug</p><p>如果可以的话就用int代替吧</p><h2 id="_4-char" tabindex="-1">4. char <a class="header-anchor" href="#_4-char" aria-label="Permalink to &quot;4. char&quot;">​</a></h2><p>这个么……</p><p>字符的类型？（不是）</p><p>也是一个数字类型</p><p>占用1字节</p><p>可以表示-127～128之间的任意整数</p><p>也就是Ascii码中的任何字符</p><h2 id="_5-bool" tabindex="-1">5. bool <a class="header-anchor" href="#_5-bool" aria-label="Permalink to &quot;5. bool&quot;">​</a></h2><p>显而易见，这个只有0和1</p><p>也就是true和false</p><p>也就是开和关</p><p>通常在if之类的条件语句中见到</p><h2 id="_6-奇怪操作" tabindex="-1">6. 奇怪操作 <a class="header-anchor" href="#_6-奇怪操作" aria-label="Permalink to &quot;6. 奇怪操作&quot;">​</a></h2><div class="language-C vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;m&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这段代码会在下篇文章讲解</p>`,35)]))}const E=a(t,[["render",e]]);export{c as __pageData,E as default};
